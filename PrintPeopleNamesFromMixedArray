using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Exercise
{
    internal class Program
    {

        public static void printNames(Person[] people)
        {
            for(int i = 0; i < people.Length; i++)
            {
                Console.WriteLine(people[i].GetName());
            }
        }

        static void Main(string[] args)
        {
            //from previous inheritence task
            Person p1 = new Person(30, "Aviv");
            Teacher t1 = new Teacher("Geography", p1);
            Console.WriteLine(t1.ToString());
            //
            Console.WriteLine("-------");



            Person[] people = new Person[3];
            people[0] = new Person(17, "Noam");
            people[1] = new Person(4, "yoram");
            people[2] = new Person(13, "Hadar");

            printNames(people);


            Console.ReadKey();
        }}}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Exercises
{

    class Person
    {
        protected int age;
        protected string name;

        public Person(int age, string name)
        {
            this.age = age;
            this.name = name;
        }
        public int GetAge() { return age; }
        public string GetName() { return name; }

        public void SetAge(int age) { this.age = age; }
        public void SetName(string name) { this.name = name; }

        public override string ToString()
        {
            return "age is: " + age + " and name is: " + name;
        }





    }


    class Student : Person
    {
        private string baseClass;


        public Student(string baseClass, int age, string name) : base(age, name)
        {
            this.baseClass = baseClass;
        }

        public string GetBaseClass() { return this.baseClass; }
        

        public void SetBaseClass(string baseClass) { this.baseClass = baseClass; }
        

        public override string ToString()
        {
            return $"Student's base class:{baseClass}, Age: {this.age}, Name: {this.name}";
        }
      




    }
    class Teacher : Person
    {
        private string subject;


        public Teacher(string subject, int age, string name) : base(age, name)
        {
            this.subject = subject;
        }

        public override string ToString()
        {
            return $"Teacher's base class:{subject}, Age: {this.age}, Name: {this.name}";
        }





    }

    internal class Program
    {

        public static void printNames(Person[] people)
        {
            for (int i = 0; i <  people.Length; i++)
            {
                Console.WriteLine(people[i].GetName());
            }
        }


        static void Main(string[] args)
        {
            Person p1 = new Person(30, "Daniel");
            Teacher t1 = new Teacher("Geography", 25, "Aviv");
            Student s1 = new Student("Geography", 17, "Noam");


            Person[] people = new Person[] { p1 , t1 , s1 };  
            printNames(people);
                



            Console.ReadKey();
        }
    }
}


