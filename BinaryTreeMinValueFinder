  public static int FindMin(BinNode<int> tree)
  {
      if (tree == null)
          return int.MaxValue;

      int minValue = tree.GetValue();

      if (tree.GetRight() != null)
      {
          int rightMin = FindMin(tree.GetRight());
          minValue = Math.Min(minValue, rightMin);
      }
      if (tree.GetLeft() != null)
      {
          int leftMin = FindMin(tree.GetLeft());
          minValue = Math.Min(minValue, leftMin);
      }
      

      return minValue;
  }
no null use:
 public static int FindMin(BinNode<int> tree)
 {
     if (tree == null)
         return int.MaxValue;

     return Math.Min(tree.GetValue(), Math.Min(FindMin(tree.GetRight()), FindMin(tree.GetLeft())));
 }

 public static void Main()
 {
     BinNode<int> t1, t2, t3, t4, t5;

     t4 = new BinNode<int>(-1);
     t5 = new BinNode<int>(5);
     t2 = new BinNode<int>(t4, 2, t5);
     t3 = new BinNode<int>(10);
     t1 = new BinNode<int>(t2, 7, t3);



     Console.WriteLine(FindMin(t1));


     Console.ReadLine();
 }




