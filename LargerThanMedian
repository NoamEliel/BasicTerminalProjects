using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static ConsoleApp3.Program;

namespace ConsoleApp3
{
    class Program
    {

        public class Node<T> //I copied the class from the classroom summery, I'll need to memorize it later, and understand why there's a need for <T>.
        {
            private T value;
            private Node<T> next;
            public Node(T value)
            {
                this.value = value;
                this.next = null;
            }
            public Node(T value, Node<T> next)
            {
                this.value = value;
                this.next = next;
            }
            /* הפעולה מחזירה את הערך של החוליה הנוכחית **/
            public T GetValue()
            {
                return value;
            }
            /* הפעולה מחזירה את החוליה העוקבת לחוליה הנוכחית **/
            public Node<T> GetNext()
            {
                return next;
            }
            /* הפעולה קובעת את ערך החוליה הנוכחית להיות  value **/
            public void SetValue(T value)
            {
                this.value = value;
            }
            /* הפעולה קובעת את החוליה העוקבת לחוליה הנוכחית להיות החוליה next **/
            public void SetNext(Node<T> next)
            {
                this.next = next;
            }
        }

        public static void printNode<T>(Node<T> head)
        {
            while (head != null)
            {
                Console.WriteLine(head.GetValue());
                head = head.GetNext();
            }
        }
       

        public static int returnMedian(Node<int> head)
        {
            Node<int> start = new Node<int>(head.GetValue(), head);
            int median = head.GetValue();
            Node<int> current = head;
            while (head != null)
            {
                int num = head.GetValue();
                int larger = 0;
                int smaller = 0;
                //caluclate how many values are larger than num:
                while (current != null)
                {
                    if (current.GetValue() < num)
                    {
                        smaller++;
                    }
                    if (current.GetValue() > num)
                    {
                        larger++;
                    }
                    if (smaller == larger && num != current.GetValue())
                    {
                        median = current.GetValue();
                        current.SetNext(null);
                    }
                   
                    current = current.GetNext();
                    
                }
                current = start;
                head = head.GetNext();
            }
            return median;
        }
        public static Node<int> LargerThanMedian(Node<int> head)
        {
            int median = returnMedian(head);
            Node<int> current = head;
            int first = 0;
            int times = 0;
            //find the first interger that is larger than the median:
            bool finder = false;
            while (finder == false)
            {
                if (current.GetValue() > median)
                {
                    first = current.GetValue();
                    finder = true;
                }
                times++;
                current = current.GetNext();
            }
            Node<int> finalNode = new Node<int>(first);
            //restart the current indicator
            current = head;
            //calibrate the current indicator
            for (int i = 0; i < times; i++)
            {
                current = current.GetNext();
            }
            Node<int>finalFinalNode = finalNode;
            //add more into the finalNode list:
            while (current != null)
            {
                if (current.GetValue() > median)
                {
                    finalNode.SetNext(new Node<int>(current.GetValue()));
                    finalNode = finalNode.GetNext();
                }
                current = current.GetNext();
            }
            return finalFinalNode;
        }


        static void Main(string[] args)
        {
            Node<int> node7 = new Node<int>(1, null);
            Node<int> node6 = new Node<int>(5, node7);
            Node<int> node5 = new Node<int>(3, node6);
            Node<int> node4 = new Node<int>(6, node5);
            Node<int> node3 = new Node<int>(4, node4);
            Node<int> node2 = new Node<int>(2, node3);
            Node<int> node1 = new Node<int>(10, node2);
            printNode(LargerThanMedian(node1));

            Console.ReadKey();
        }
    }
}



