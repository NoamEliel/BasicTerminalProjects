using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace ConsoleApp1
{
    class BinNode<T>
    {
        private BinNode<T> left;
        private T value;
        private BinNode<T> right;


        public BinNode(T value)
        {
            this.left = null;
            this.value = value;
            this.right = null;
        }
        public BinNode(BinNode<T> left, T value, BinNode<T> right)
        {
            this.left = left;
            this.value = value;
            this.right = right;
        }
        public T GetValue()
        { return this.value; }
        public BinNode<T> GetLeft()
        { return this.left; }
        public BinNode<T> GetRight()
        { return this.right; }
        public void Setvalue(T value)
        {
            this.value = value;
        }
        public void SetLeft(BinNode<T> left)
        {
            this.left = left;
        }
        public void SetRight(BinNode<T> right)
        {
            this.right = right;
        }
        public bool HasLeft()
        {
            return this.left != null;
        }
        public bool HasRight()
        {
            return this.right != null;
        }
        public override string ToString()
        {
            return this.value.ToString();
        }
    }

    class Program
    {
        public static int ShortestDistanceToEven(BinNode<int> root)
        {
            return DFS(root, 0);
        }

        private static int DFS(BinNode<int> node, int depth)
        {
            if (node == null)
                return int.MaxValue; 

            if (node.GetValue() % 2 == 0)
                return depth; 

            
            int left = DFS(node.GetLeft(), depth + 1);
            int right = DFS(node.GetRight(), depth + 1);

            return Math.Min(left, right);
        }

        static void Main(string[] args)
        {
            BinNode<int> node4 = new BinNode<int>(null, 4, null);
            BinNode<int> node3 = new BinNode<int>(node4, 3, null);
            BinNode<int> node7 = new BinNode<int>(null, 7, null);
            BinNode<int> node1 = new BinNode<int>(node7, 1, null);
            BinNode<int> root = new BinNode<int>(node3, 3, node1);

            Console.WriteLine(ShortestDistanceToEven(root)); 

            Console.ReadKey();
        }
    }
}







