using Exercise;
using System;
using System.Xml.Linq;
using static Program;

public class Program
{
    public class BinNode<T>
    {
        private BinNode<T> left;
        private T value;
        private BinNode<T> right;


        public BinNode(T value)
        {
            this.left = null;
            this.value = value;
            this.right = null;
        }
        public BinNode(BinNode<T> left, T value, BinNode<T> right)
        {
            this.left = left;
            this.value = value;
            this.right = right;
        }
        public T GetValue()
        { return this.value; }
        public BinNode<T> GetLeft()
        { return this.left; }
        public BinNode<T> GetRight()
        { return this.right; }
        public void Setvalue(T value)
        {
            this.value = value;
        }
        public void SetLeft(BinNode<T> left)
        {
            this.left = left;
        }
        public void SetRight(BinNode<T> right)
        {
            this.right = right;
        }
        public bool HasLeft()
        {
            return this.left != null;
        }
        public bool HasRight()
        {
            return this.right != null;
        }
        public override string ToString()
        {
            return this.value.ToString();
        }
    }


    static int CombineBottomNumbers(BinNode<int> root)
    {
        string result = "";
        void Dfs(BinNode<int> node)
        {
            if (node == null) return;
            if (node.GetLeft() == null && node.GetRight() == null)
            {
                result += node.GetValue().ToString();
                return;
            }
            Dfs(node.GetLeft());
            Dfs(node.GetRight());
        }
        Dfs(root);
        return int.Parse(result);
    }

    public static void Main(string[] args)
    {
        BinNode<int> seven = new BinNode<int>(null, 7, null);
        BinNode<int> four = new BinNode<int>(null, 4, null);
        BinNode<int> one = new BinNode<int>(null, 1, null);
        BinNode<int> three = new BinNode<int>(four, 3, seven);
        BinNode<int> root = new BinNode<int> (three, 0, one);
        Console.WriteLine(CombineBottomNumbers(root));

        Console.ReadKey();
    }
}




